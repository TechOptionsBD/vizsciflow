{
    "functions": [
       
       {
           "org": "srlab",
           "package": "galaxy",
           "module": "app.biowl.libraries.galaxy.adapter",
           "level": "1",
           "group": "Workflow",
           "name":"GetLibraries",
           "internal":"get_library_ids",
           "desc": "Gets the ids of all libraries.",
           "returns": "string[]",
           "example":"library_ids = galaxy.GetLibraries()",
           "runmode": "dist"
       },
       {
           "org": "srlab",
           "package": "galaxy",
           "module": "app.biowl.libraries.galaxy.adapter",
           "level": "1",
           "group": "Workflow",
           "name":"GetLibraryInfo",
           "internal":"get_library_info",
           "desc": "Gets the properties of a library.",
           "returns": "{}",
           "example":"library_info = galaxy.GetLibraryInfo(library_id)",
           "runmode": "dist"
       },
       {
           "org": "srlab",
           "package": "galaxy",
           "module": "app.biowl.libraries.galaxy.adapter",
           "level": "1",
           "group": "Workflow",
           "name":"GetHistories",
           "internal":"get_history_ids",
           "desc": "Gets the ids of all histories.",
           "returns": "string[]",
           "example":"history_ids = galaxy.GetHistories()",
           "runmode": "dist"
       },
       {
           "org": "srlab",
           "package": "galaxy",
           "module": "app.biowl.libraries.galaxy.adapter",
           "level": "1",
           "group": "Workflow",
           "name":"GetHistoryInfo",
           "internal":"get_history_info",
           "desc": "Gets the properties of a history.",
           "returns": "json",
           "example":"history_info = galaxy.GetHistoryInfo(history_id)",
           "runmode": "dist"
       },
       {
           "org": "srlab",
           "package": "galaxy",
           "module": "app.biowl.libraries.galaxy.adapter",
           "level": "0",
           "group": "Workflow",
           "name":"CreateHistory",
           "internal":"create_history",
           "desc": "Create a new history.",
           "returns": "string",
           "example":"history_id = galaxy.CreateHistory('New History')",
           "runmode": "dist"
       },
       {
           "org": "srlab",
           "package": "galaxy",
           "module": "app.biowl.libraries.galaxy.adapter",
           "level": "0",
           "group": "Workflow",
           "name":"Upload",
           "internal":"local_upload",
           "desc": "Uploads a file to a history or a library. If no history or library is given, the most recent history is taken.",
           "returns": "string",
           "example":"data = galaxy.Upload(data) # data = ftp_or_http_or_path_to_file",
           "example2":"data = galaxy.Upload(ftp_or_http_or_path_to_file, [history_id/library_id])",
           "runmode": "dist"
       },
       {
           "org": "srlab",
           "package": "galaxy",
           "module": "app.biowl.libraries.galaxy.adapter",
           "level": "1",
           "group": "Workflow",
           "name":"Download",
           "internal":"run_download",
           "desc": "Download a dataset to file.",
           "returns": "string",
           "example":"data = galaxy.Download(data)",
           "example2":"data = galaxy.Download(data, [outdir=])",
           "runmode": "dist"
       },
       {
           "org": "srlab",
           "package": "galaxy",
           "module": "app.biowl.libraries.galaxy.adapter",
           "group": "Quality",
           "level": 0,
           "name":"Groom",
           "internal":"run_fastq_groomer",
           "desc": "Runs the fastq groomer tool. If history_id not given and not found in the context, a new history is created.",
           "returns": "string",
           "example":"data = galaxy.Groom(data)",
           "example2":"data = galaxy.Groom(data=, [history_id = history_id])",
           "runmode": "dist"
       },
       {
           "org": "srlab",
           "package": "galaxy",
           "module": "app.biowl.libraries.galaxy.adapter",
           "group": "Alignment",
           "level": 0,
           "name":"Align",
           "internal":"run_bwa",
           "desc": "Map with BWA. mapping low-divergent sequences against a large reference genome, such as the human genome and is designed for Illumina sequence reads up to 100bp.",
           "returns": "string",
           "example":"data = galaxy.Align(ref, data) #single-read",
           "example2":"data = galaxy.Align(ref=, data=, [data2=], [history_id=history_id], [datatype='fastq/bam']) #pair-read",
           "runmode": "dist"
       },
       {
           "org": "srlab",
           "package": "galaxy",
           "module": "app.biowl.libraries.galaxy.adapter",
           "group": "Text",
           "level": 0,
           "name":"Cut",
           "internal":"run_cut",
           "desc": "Selects (cuts out) specified columns from the dataset. The output of this tool is always in tabular format (e.g., if your original delimiters are commas, they will be replaced with tabs).",
           "returns": "string",
           "example":"data = galaxy.Cut(data, columns='c1')",
           "example2":"data = galaxy.Cut(data, [columns='c1,c2'], [delimeter='Tab/Whitespace/Comma/Dot/Dash/_/|'], [history_id=history_id])",
           "runmode": "dist"
       },
       {
           "org": "srlab",
           "package": "galaxy",
           "module": "app.biowl.libraries.galaxy.adapter",
           "group": "Text",
           "level": 0,
           "name":"Trim",
           "internal":"run_trim",
           "desc": "Trims specified number of characters from a dataset or its field (if dataset is tab-delimited).",
           "returns": "string",
           "example":"data = galaxy.Trim(data)",
           "example2":"data = galaxy.Trim(data, [col=0], [start=1], [end=0], [ignore='>@+<*-=|?$.:&%^#'], [history_id=history_id])",
           "runmode": "dist"
       },
       {
           "org": "srlab",
           "package": "galaxy",
           "module": "app.biowl.libraries.galaxy.adapter",
           "group": "Analysis",
           "level": 0,
           "name":"Join",
           "internal":"run_join",
           "desc": "Joins lines of two datasets on a common field. Columns are referenced with a number. If your data is not TAB delimited, use Text Manipulation->Convert",
           "returns": "string",
           "example":"data = galaxy.Join(data1, data2, field1=1, field2=1)",
           "example2":"data = galaxy.Join(data1=, data2=, [field1=1], [field2=1], [history_id=history_id])",
           "runmode": "dist"
       },
       {
           "org": "srlab",
           "package": "galaxy",
           "module": "app.biowl.libraries.galaxy.adapter",
           "group": "Analysis",
           "level": 0,
           "name":"Group",
           "internal":"run_group",
           "desc": "Allows to group the input dataset by a particular column and perform aggregate functions: Mean, Median, Mode, Sum, Max, Min, Count, Concatenate, and Randomly pick on any column(s). If your data is not TAB delimited, use Text Manipulation->Convert",
           "returns": "string",
           "example":"data = galaxy.Group(data, groupcol=1, op1='optype|opcol|opround')",
           "example2":"data = galaxy.Group(data=, [groupcol=1], [op1='optype|opcol|opround', ...], [ignorecase=True/False], ignorelines=['>@+<*-=|?$.:&%^#'], [history_id=history_id]) # op1='mean|1|no' optype=mean|median|mode|max|min|sum|length|unique|cat|cat_uniq|randomly|std",
           "runmode": "dist"
       },
       {
           "org": "srlab",
           "package": "galaxy",
           "module": "app.biowl.libraries.galaxy.adapter",
           "group": "Analysis",
           "level": 0,
           "name":"Sort",
           "internal":"run_sort",
           "desc": "Sorts the dataset on any number of columns in either ascending or descending order. Sort type - Numerical, general numeric, alphabetical. If the data is not TAB delimited, use Text Manipulation->Convert",
           "returns": "string",
           "example":"data = galaxy.Sort(data)",
           "example2":"data = galaxy.Sort(data=, col='col|style|order', [col1='col|style|order',...], field1=, field2=, [col=0], [start=1], [end=0], [ignore='>@+<*-=|?$.:&%^#'], [history_id=history_id]) # style=num|gennum|alpha, order=DESC|ASC",
           "runmode": "dist"
       },
       {
           "org": "srlab",
           "package": "galaxy",
           "module": "app.biowl.libraries.galaxy.adapter",
           "group": "Text",
           "level": 0,
           "name":"SelectFirst",
           "internal":"run_selectfirst",
           "desc": "Outputs specified number of lines from the beginning of a dataset.",
           "returns": "string",
           "example":"data = galaxy.SelectFirst(data, lines=10)",
           "example2":"data = galaxy.SelectFirst(data=, [lines=10], [history_id=history_id])",           
           "runmode": "dist"
       },
       {
           "org": "srlab",
           "package": "galaxy",
           "module": "app.biowl.libraries.galaxy.adapter",
           "group": "Analysis",
           "level": 0,
           "name":"Compare",
           "internal":"run_compare",
           "desc": "Outputs specified number of lines from the beginning of a dataset.",
           "returns": "string",
           "example":"data = galaxy.Compare(data1, data2, field1=1, field2=1)",
           "example2":"data = galaxy.Compare(data1=, data2=, [field1=1], [field2=1], [mode='N'],[history_id=history_id])#mode='N|V'",           
           "runmode": "dist"
       },
       {
           "org": "srlab",
           "package": "galaxy",
           "module": "app.biowl.libraries.galaxy.adapter",
           "group": "Analysis",
           "level": 0,
           "name":"Unique",
           "internal":"run_fastuniq",
           "desc": "Removes duplicates in paired short DNA sequence reads in FASTQ format. It identifies duplicates by comparing sequences between read pairs and does not require complete genome sequences as prerequisites. It is also capable of simultaneously handling reads with different lengths and results in highly efficient running time.",
           "returns": "string, string",
           "example":"data, data2 = galaxy.Unique(data, data2)",           
           "example2":"data, data2 = galaxy.Unique(data=, data2=, [format=q/f]) #q=fastq, f=fasta",
           "runmode": "dist"
       },
       {
           "org": "srlab",
           "package": "galaxy",
           "module": "app.biowl.libraries.galaxy.adapter",
           "group": "Analysis",
           "level": 0,
           "name":"Clip",
           "internal":"run_clip_adapter",
           "desc": "Clips adapter sequences. Renumbers sequence headers. Filters sequences on their size. Filters sequences containing unknown nucleotides (optional).",
           "returns": "string",
           "example":"data = galaxy.Clip(data, min=0, max=15)",
           "example2":"data = galaxy.Clip(data=, min=0, max=15)",
           "runmode": "dist"
       },
       {
           "org": "srlab",
           "package": "galaxy",
           "module": "app.biowl.libraries.galaxy.adapter",
           "group": "Text",
           "level": 1,
           "name":"TrimAdaptive",
           "internal":"run_sickle",
           "desc": "Uses sliding windows along with quality and length thresholds to determine when quality is sufficiently low to trim the 3'-end of reads and also determines when the quality is sufficiently high enough to trim the 5'-end of reads. It will also discard reads based upon the length threshold.",
           "returns": "[string]",
           "example":"datasets = galaxy.TrimAdaptive(data1, mode=se, quality=20, length=20)",
           "example2":"datasets = galaxy.TrimAdaptive(data1=, [data2=], [mode=se/pe/pe-combo], [quality=20], [length=20], [history_id=history_id])",
           "runmode": "dist"
       },
       {
           "org": "srlab",
           "package": "galaxy",
           "module": "app.biowl.libraries.galaxy.adapter",
           "group": "Quality",
           "level": 0,
           "name":"CheckQuality",
           "internal":"run_fastqc",
           "desc": "Provide a simple way to do some quality control checks on raw sequence data coming from high throughput sequencing pipelines.",
           "returns": "string",
           "example":"data = galaxy.CheckQuality(data)",
           "example2":"data = galaxy.CheckQuality(data=, [history_id=history_id])",
           "runmode": "dist"
       },
       {
           "org": "srlab",
           "package": "galaxy",
           "module": "app.biowl.libraries.galaxy.adapter",
           "group": "Analysis",
           "level": 0,
           "name":"Filter",
           "internal":"run_filter",
           "desc": "Allows to restrict the dataset using simple conditional statements. Columns are referenced with c and a number (e.g. c1). Data must be tabular.",
           "returns": "string",
           "example":"data = galaxy.Filter(data, condition='c1==5')",
           "example2":"data = galaxy.Filter(data=, condition=, [history_id=history_id])",           
           "runmode": "dist"
       },
       {
           "org": "srlab",
           "package": "galaxy",
           "module": "app.biowl.libraries.galaxy.adapter",
           "group": "Convert",
           "level": 0,
           "name":"ToTabular",
           "internal":"run_convert_to_tab",
           "desc": "Converts all delimiters of a specified type into TABs. Consecutive delimiters can be condensed in a single TAB.",
           "returns": "string",
           "example":"data = galaxy.ToTabular(data)",
           "example2":"data = galaxy.ToTabular(data1=, [delimeter='Tab , . - _ | : ;'], [history_id=history_id]) # delimeters can be one of T(tab), ' '(whitespace), . (dot), comma(,), dash(-), underscore(_), pipe(|), colon(:), semicolon(;)",
           "runmode": "dist"
       },
       {
           "org": "srlab",
           "package": "galaxy",
           "module": "app.biowl.libraries.galaxy.adapter",
           "group": "Convert",
           "level": 0,
           "name":"FastqToSam",
           "internal":"run_fastq_to_sam",
           "desc": "Converts Fastq data format to SAM data format.",
           "returns": "string",
           "example":"data = galaxy.FastqToSam(data)",
           "example2":"data = galaxy.FastqToSam(data=, [history_id=history_id])",
           "runmode": "dist"
       },
       {
           "org": "srlab",
           "package": "galaxy",
           "module": "app.biowl.libraries.galaxy.adapter",
           "group": "Convert",
           "level": 0,
           "name":"BamToSam",
           "internal":"run_bam_to_sam",
           "desc": "Converts BAM data format to SAM data format.",
           "returns": "string",
           "example":"data = galaxy.BamToSam(data)",
           "example2":"data = galaxy.BamToSam(data=, [history_id=history_id])",
           "runmode": "dist"
       },
       {
           "org": "srlab",
           "package": "galaxy",
           "module": "app.biowl.libraries.galaxy.adapter",
           "group": "Convert",
           "level": 0,
           "name":"SamToBam",
           "internal":"run_sam_to_bam",
           "desc": "Converts SAM data format to BAM binary data format.",
           "returns": "string",
           "example":"data = galaxy.SamToBam(ref, data)",
           "example2":"data = galaxy.SamToBam(ref=, data=, [history_id=history_id])",
           "runmode": "dist"
       },
       {
           "org": "srlab",
           "package": "galaxy",
           "module": "app.biowl.libraries.galaxy.adapter",
           "group": "Convert",
           "level": 0,
           "name":"FastqToFasta",
           "internal":"run_fastq_to_fasta",
           "desc": "Convert FASTQ to FASTA format.",
           "returns": "string",
           "example":"data = galaxy.FastqToFasta(data)",
           "example2":"data = galaxy.FastqToFasta(data=, [history_id=history_id])",
           "runmode": "dist"
       },
       {
           "org": "srlab",
           "package": "galaxy",
           "module": "app.biowl.libraries.galaxy.adapter",
           "group": "Convert",
           "level": 0,
           "name":"SamToInterval",
           "internal":"run_sam_to_interval",
           "desc": "Converts SAM data format to Interval data format.",
           "returns": "string",
           "example":"data = galaxy.SamToInterval(data)",
           "example2":"data = galaxy.SamToInterval(data=, [history_id=history_id])",
           "runmode": "dist"
       },
       {
           "org": "srlab",
           "package": "galaxy",
           "module": "app.biowl.libraries.galaxy.adapter",
           "group": "Convert",
           "level": 0,
           "name":"iJoin",
           "internal":"run_join_interval",
           "desc": "Joins two interval datasets.",
           "returns": "string",
           "example":"data = galaxy.iJoin(data, data2, min=1)",
           "example2":"data = galaxy.iJoin(data=, data2=, [min=1], [history_id=history_id])",
           "runmode": "dist"
       },
       {
           "org": "srlab",
           "package": "galaxy",
           "module": "app.biowl.libraries.galaxy.adapter",
           "group": "Convert",
           "level": 0,
           "name":"GetSniffers",
           "internal":"get_installed_sniffers",
           "desc": "Get the list of all installed sniffers.",
           "returns": "string[]",
           "example":"sniffers = galaxy.GetSniffers()",
           "runmode": "dist"
       },
       {
           "org": "srlab",
           "package": "galaxy",
           "module": "app.biowl.libraries.galaxy.adapter",
           "group": "Convert",
           "level": 0,
           "name":"GetDatatypes",
           "internal":"get_installed_datatypes",
           "desc": "Get the list of all installed datatypes.",
           "returns": "string[]",
           "example":"datatypes = galaxy.GetDatatypes()",
           "runmode": "dist"
       },
       {
           "org": "srlab",
           "package": "galaxy",
           "module": "app.biowl.libraries.galaxy.adapter",
           "group": "Convert",
           "level": 0,
           "name":"GetDatatype",
           "internal":"get_datatype",
           "desc": "Get the datatype name of a dataset.",
           "returns": "string",
           "example":"datatype = galaxy.GetDatatype(data) #hda or ldda",
           "runmode": "dist"
       },
       {
           "org": "srlab",
           "package": "galaxy",
           "module": "app.biowl.libraries.galaxy.adapter",
           "group": "Analysis",
           "level": "0",
           "name":"Merge",
           "internal":"run_merge_pear",
           "runmode": "dist",
           "desc": "Pair-end read merger for fastq files. It evaluates all possible paired-end read overlaps. In addition, it implements a statistical test for minimizing false-positive results.",
           "returns": "string",
           "example":"data = galaxy.Merge(data, data2)",
           "example2":"data = galaxy.Merge(data=, data2=)",
           "params":[  
            {  
               "name":"data",
               "type":"string",
               "desc":"forward fastq file"
            },
            {  
               "name":"data2",
               "type":"string",
               "desc":"reverse fastq file"
            },
            {
               "name": "output",
               "type": "string",
               "desc":"output directory with filename prefix"
            }
            ]
       }
   ]
}