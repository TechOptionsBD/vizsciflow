{
	"functions": [
		{
			"org": "srlab",
			"package": "qiime",
			"group": "Analysis",
			"name": "DemuxSingle",
			"internal": "run_qiime_demux_single",
			"runmode": "local",
			"desc": "Demultiplex any number of single-end FASTA or a FASTQ files based on a list of barcodes.",
			"example": "data = qiime.DemuxSingle(data, barcode, barcodeCol)",
			"example2": "data = qiime.DemuxSingle(data, barcode='', barcodeCol='', output='')",
			"params": [				
				{
					"name": "data",
					"type": "file"
				},
				{
					"name": "barcode",
					"type": "file"
				},
				{
					"name": "barcodeCol",
					"type": "str"
				}
			],
            "returns": 
            {
                "name": "data",
                "type": "file"
            }
		},
		{
			"org": "srlab",
			"package": "qiime",
			"group": "Analysis",
			"name": "DemuxSummarize",
			"internal": "run_qiime_demux_summarize",
			"runmode": "local",
			"desc": "Generates a summary of the demultiplexing results.",
			"example": "visual = qiime.DemuxSummarize(data)",
			"example2": "visual = qiime.DemuxSummarize(data, output='')",
			"params": [				
				{
					"name": "data",
					"type": "file"
				}
			],
            "returns": 
            {
                "name": "data",
                "type": "file"
            }
		},
		{
			"org": "srlab",
			"package": "qiime",
			"group": "Analysis",
			"name": "Dada2DenoiseSingle",
			"internal": "run_qiime_dada2_denoise_single",
			"runmode": "local",
			"desc": "Detects and corrects Illumina amplicon sequence data.",
			"example": "data = qiime.Dada2DenoiseSingle(data, trimleft=0, trunclen=120)",
			"example2": "data = qiime.Dada2DenoiseSingle(data, trimleft=0, trunclen=120, repseqs='', table='', stats='')",
			"params": [				
				{
					"name": "data",
					"type": "file"
				},
				{
					"name": "trimleft",
					"type": "int"
				},
				{
					"name": "trunclen",
					"type": "int"
				}
			],
            "returns": 
            {
                "name": "data",
                "type": "file"
            }
		},
		{
			"org": "srlab",
			"package": "qiime",
			"group": "Analysis",
			"name": "DeblurDenoise16S",
			"internal": "run_qiime_deblur_denoise_16s",
			"runmode": "local",
			"desc": "Detects and corrects Illumina amplicon sequence data.",
			"example": "dataList = qiime.DeblurDenoise16S(data, trimlen=120)",
			"example2": "data = qiime.DeblurDenoise16S(data, trimlen=120, repseqs='', table='', stats='')",
			"params": [				
				{
					"name": "data",
					"type": "file"
				},
				{
					"name": "trimlen",
					"type": "int"
				}
			],
            "returns": [
            {
                "name": "data",
                "type": "file[]"
            }
			]
		},
		{
			"org": "srlab",
			"package": "qiime",
			"group": "Analysis",
			"name": "FilterQScore",
			"internal": "run_qiime_quality_qscore",
			"runmode": "local",
			"desc": "Applies a quality filtering process based on quality score.",
			"example": "dataList = qiime.FilterQScore(data)",
			"example2": "dataList = qiime.FilterQScore(data, repseqs='', stats='')",
			"params": [				
				{
					"name": "data",
					"type": "file"
				}
			],
            "returns": [
            {
                "name": "data",
                "type": "file[]"
            }
			]
		},
		{
			"org": "srlab",
			"package": "qiime",
			"group": "Analysis",
			"name": "MetadataTabulate",
			"internal": "run_qiime_metadata_tabulate",
			"runmode": "local",
			"desc": "Generate visualization for summary statistics.",
			"example": "visual = qiime.MetadataTabulate(data)",
			"example2": "visual = qiime.MetadataTabulate(data)",
			"params": [				
				{
					"name": "data",
					"type": "file"
				}
			],
            "returns": [
            {
                "name": "data",
                "type": "file"
            }
			]
		},
		{
			"org": "srlab",
			"package": "qiime",
			"group": "Analysis",
			"name": "DeblurVisualizeStats",
			"internal": "run_qiime_deblur_visualize_stats",
			"runmode": "local",
			"desc": "Generate visualization for summary statistics.",
			"example": "visual = qiime.DeblurVisualizeStats(data)",
			"example2": "visual = qiime.DeblurVisualizeStats(data)",
			"params": [				
				{
					"name": "data",
					"type": "file"
				}
			],
            "returns": [
            {
                "name": "data",
                "type": "file"
            }
			]
		},
		{
			"org": "srlab",
			"package": "qiime",
			"group": "Analysis",
			"name": "FeatureTableSummarize",
			"internal": "run_qiime_feature_table_summarize",
			"runmode": "local",
			"desc": "Generate visual summaries of the data.",
			"example": "visual = qiime.FeatureTableSummarize(data, metadata)",
			"example2": "visual = qiime.FeatureTableSummarize(data, metadata)",
			"params": [
				{
					"name": "data",
					"type": "file"
				},
				{
					"name": "metadata",
					"type": "file"
				}
			],
            "returns": [
            {
                "name": "data",
                "type": "file"
            }
			]
		},		
		{
			"org": "srlab",
			"package": "qiime",
			"group": "Analysis",
			"name": "FeatureTableTabulate",
			"internal": "run_qiime_feature_table_tabulate_seqs",
			"runmode": "local",
			"desc": "Generate visual summaries of the data.",
			"example": "visual = qiime.FeatureTableTabulate(data)",
			"example2": "visual = qiime.FeatureTableTabulate(data)",
			"params": [
				{
					"name": "data",
					"type": "file"
				}
			],
            "returns": [
            {
                "name": "data",
                "type": "file"
            }
			]
		},
		{
			"org": "srlab",
			"package": "qiime",
			"group": "Analysis",
			"name": "PhylogenyTree",
			"internal": "run_qiime_phylogeny_tree",
			"runmode": "local",
			"desc": "Generate a phylogenetic tree of the data.",
			"example": "dataList = qiime.PhylogenyTree(data)",
			"example2": "dataList = qiime.PhylogenyTree(data)",
			"params": [
				{
					"name": "data",
					"type": "file"
				}
			],
            "returns": [
            {
                "name": "data",
                "type": "file[]"
            }
			]
		},		
		{
			"org": "srlab",
			"package": "qiime",
			"group": "Analysis",
			"name": "DiversityCoreMetrics",
			"internal": "run_qiime_diversity_core_metrics",
			"runmode": "local",
			"desc": "Diversity core metrics analysis of phylogenetic tree.",
			"example": "outpath = qiime.DiversityCoreMetrics(data, table, metadata, sampling)",
			"example2": "outpath = qiime.DiversityCoreMetrics(data, table='', metadata='', sampling=0, outpath='')",
			"params": [
				{
					"name": "data",
					"type": "file"
				},
				{
					"name": "table",
					"type": "file"
				},
				{
					"name": "metadata",
					"type": "file"
				},
				{
					"name": "sampling",
					"type": "int",
					"desc": "The sampling depth"
				},
				{
					"name": "output",
					"type": "folder",
					"desc":"bray_curtis_distance_matrix.qza rarefied_table.qza bray_curtis_emperor.qzv shannon_vector.qza bray_curtis_pcoa_results.qza unweighted_unifrac_distance_matrix.qza evenness_vector.qza unweighted_unifrac_emperor.qzv faith_pd_vector.qza unweighted_unifrac_pcoa_results.qza jaccard_distance_matrix.qza weighted_unifrac_distance_matrix.qza jaccard_emperor.qzv weighted_unifrac_emperor.qzv jaccard_pcoa_results.qza weighted_unifrac_pcoa_results.qza observed_otus_vector.qza"
				}
			],
            "returns": [
            {
                "name": "data",
                "type": "folder"
            }
			]
		},
		{
			"org": "srlab",
			"package": "qiime",
			"group": "Analysis",
			"name": "DiversityAlpha",
			"internal": "run_qiime_diversity_alpha_significance",
			"runmode": "local",
			"desc": "Diversity alpha group significance.",
			"example": "visual = qiime.DiversityAlpha(data, metadata)",
			"example2": "visual = qiime.DiversityAlpha(data, metadata='', output)",
			"params": [
				{
					"name": "data",
					"type": "file"
				},
				{
					"name": "metadata",
					"type": "file"
				},
				{
					"name": "output",
					"type": "file"
				}
			],
            "returns": [
            {
                "name": "data",
                "type": "file"
            }
			]
		},
		{
			"org": "srlab",
			"package": "qiime",
			"group": "Analysis",
			"name": "DiversityBeta",
			"internal": "run_qiime_diversity_beta_significance",
			"runmode": "local",
			"desc": "Diversity beta group significance.",
			"example": "visual = qiime.DiversityBeta(data, metadata, metaDataCol)",
			"example2": "visual = qiime.DiversityBeta(data, metadata='', metaDataCol='', output)",
			"params": [
				{
					"name": "data",
					"type": "file"
				},
				{
					"name": "metadata",
					"type": "file"
				},
				{
					"name": "metadataCol",
					"type": "str"
				},
				{
					"name": "output",
					"type": "file"
				}
			],
            "returns": [
            {
                "name": "data",
                "type": "file"
            }
			]
		},
		{
			"org": "srlab",
			"package": "qiime",
			"group": "Analysis",
			"name": "EmperorPlot",
			"internal": "run_qiime_emperor_plot",
			"runmode": "local",
			"desc": "Explore principal coordinates (PCoA) plots in the context of sample metadata.",
			"example": "visual = qiime.EmperorPlot(data, metadata, customAxes)",
			"example2": "visual = qiime.EmperorPlot(data, metadata, customAxes, output)",
			"params": [
				{
					"name": "data",
					"type": "file"
				},
				{
					"name": "metadata",
					"type": "file"
				},
				{
					"name": "customAxes",
					"type": "str"
				},
				{
					"name": "output",
					"type": "file"
				}
			],
            "returns": [
            {
                "name": "data",
                "type": "file"
            }
			]
		},
		{
			"org": "srlab",
			"package": "qiime",
			"group": "Analysis",
			"name": "DiversityRarefaction",
			"internal": "run_qiime_diversity_alpha_rarefaction",
			"runmode": "local",
			"desc": "Explore alpha diversity as a function of sampling depth.",
			"example": "visual = qiime.DiversityRarefaction(data, table, metadata, maxDepth)",
			"example2": "visual = qiime.DiversityRarefaction(data, table, metadata, minDepth = 1, maxDepth = 4000)",
			"params": [
				{
					"name": "data",
					"type": "file"
				},
				{
					"name": "metadata",
					"type": "file"
				},
				{
					"name": "customAxes",
					"type": "str"
				},
				{
					"name": "output",
					"type": "file"
				}
			],
            "returns": [
            {
                "name": "data",
                "type": "file"
            }
			]
		},
		{
			"org": "srlab",
			"package": "qiime",
			"group": "Analysis",
			"name": "ClassifierSklearn",
			"internal": "run_qiime_feature_classifier_classify_sklearn",
			"runmode": "local",
			"desc": "Generate taxonomy from sequence using a pre-trained Naive Bayes classifier.",
			"example": "data = qiime.ClassifierSklearn(data, classifier)",
			"example2": "data = qiime.ClassifierSklearn(data, classifier, output)",
			"params": [
				{
					"name": "data",
					"type": "file"
				},
				{
					"name": "classifier",
					"type": "file"
				},
				{
					"name": "output",
					"type": "file"
				}
			],
            "returns": [
            {
                "name": "data",
                "type": "file"
            }
			]
		},
		{
			"org": "srlab",
			"package": "qiime",
			"group": "Analysis",
			"name": "TaxaBarPlot",
			"internal": "run_qiime_taxa_barplot",
			"runmode": "local",
			"desc": "Generate bar plots to view the taxonomic composition of samples interactively.",
			"example": "visual = qiime.TaxaBarPlot(data, table, metadata)",
			"example2": "visual = qiime.TaxaBarPlot(data, table, metadata)",
			"params": [
				{
					"name": "data",
					"type": "file"
				},
				{
					"name": "table",
					"type": "file"
				},
				{
					"name": "metadata",
					"type": "file"
				},
				{
					"name": "output",
					"type": "file"
				}
			],
            "returns": [
            {
                "name": "data",
                "type": "file"
            }
			]
		},
		{
			"org": "srlab",
			"package": "qiime",
			"group": "Analysis",
			"name": "FilterSamples",
			"internal": "run_qiime_feature_table_filter_samples",
			"runmode": "local",
			"desc": "Create a feature table that contains specific samples.",
			"example": "data = qiime.FilterSamples(data, metadata, where)",
			"example2": "data = qiime.FilterSamples(data, metadata, where)",
			"params": [
				{
					"name": "data",
					"type": "file"
				},
				{
					"name": "metadata",
					"type": "file"
				},
				{
					"name": "where",
					"type": "str"
				},
				{
					"name": "output",
					"type": "file"
				}
			],
            "returns": [
            {
                "name": "data",
                "type": "file"
            }
			]
		},
		{
			"org": "srlab",
			"package": "qiime",
			"group": "Analysis",
			"name": "ComposeAddPseudocount",
			"internal": "run_qiime_composition_add_pseudocount",
			"runmode": "local",
			"desc": "Create a composition artifact which is based on frequencies of features on a per-sample basis.",
			"example": "data = qiime.ComposeAddPseudocount(data)",
			"example2": "data = qiime.ComposeAddPseudocount(data, output='')",
			"params": [
				{
					"name": "data",
					"type": "file",
					"comment": "filtered table"
				},
				{
					"name": "output",
					"type": "file"
				}
			],
            "returns": [
            {
                "name": "data",
                "type": "file"
            }
			]
		},
		{
			"org": "srlab",
			"package": "qiime",
			"group": "Analysis",
			"name": "ComposeAncom",
			"internal": "run_qiime_composition_ancom",
			"runmode": "local",
			"desc": "Determine what features differ in abundance across the samples of the two subjects.",
			"example": "visual = qiime.ComposeAncom(data, metadata, metaDataCol)",
			"example2": "visual = qiime.ComposeAncom(data, metadata, metaDataCol, output='')",
			"params": [
				{
					"name": "data",
					"type": "file"
				},
				{
					"name": "metadata",
					"type": "file"
				},
				{
					"name": "metadataCol",
					"type": "str"
				},
				{
					"name": "output",
					"type": "file"
				}
			],
            "returns": [
            {
                "name": "data",
                "type": "file"
            }
			]
		},
		{
			"org": "srlab",
			"package": "qiime",
			"group": "Analysis",
			"name": "TaxaCollapse",
			"internal": "run_qiime_taxa_collapse",
			"runmode": "local",
			"desc": "Collapse the features in feature table to perform a differential abundance test at a specific taxonomic level.",
			"example": "data = qiime.TaxaCollapse(data, table, level)",
			"example2": "data = qiime.TaxaCollapse(data, table, level, output='')",
			"params": [
				{
					"name": "data",
					"type": "file"
				},
				{
					"name": "table",
					"type": "file"
				},
				{
					"name": "level",
					"type": "int"
				},
				{
					"name": "output",
					"type": "file"
				}
			],
            "returns": [
            {
                "name": "data",
                "type": "file"
            }
			]
		},
		{
			"org": "srlab",
			"package": "qiime",
			"group": "Analysis",
			"name": "Import",
			"internal": "run_qiime_import",
			"runmode": "local",
			"desc": "Import data files into qiime repository type.",
			"example": "data = qiime.Import(data, type='EMPSingleEndSequences') # data is the input path for data file(s) and barcode, if needed for the type",
			"example2": "data = qiime.Import(data, type='EMPSingleEndSequences', output=sys.dir(data)+'/'+basename(data))",
			"params": [
				{
					"name": "data",
					"type": "folder",
					"comment": "A folder for input depending on type."
				},
				{
					"name": "data",
					"type": "str"
				}
			],
            "returns": [
            {
                "name": "data",
                "type": "file"
            }
			]
		},
		{
			"org": "srlab",
			"package": "qiime",
			"group": "Analysis",
			"name": "ImportTypes",
			"internal": "run_qiime_import_types",
			"runmode": "local",
			"desc": "Importable types.",
			"example": "data = qiime.ImportTypes()",
			"example2": "data = qiime.ImportTypes()",
            "returns": [
            {
                "name": "data",
                "type": "str"
            }
			]
		}
	]
}